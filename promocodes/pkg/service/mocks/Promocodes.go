// Code generated by mockery v2.48.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	types "promocodes"
)

// Promocodes is an autogenerated mock type for the Promocodes type
type Promocodes struct {
	mock.Mock
}

// ApplyPromocodeAction provides a mock function with given fields: _a0, _a1
func (_m *Promocodes) ApplyPromocodeAction(_a0 types.RewardsRecord, _a1 types.Promocode) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ApplyPromocodeAction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(types.RewardsRecord, types.Promocode) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetPromocode provides a mock function with given fields: _a0
func (_m *Promocodes) GetPromocode(_a0 types.Promocode) (types.Promocode, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPromocode")
	}

	var r0 types.Promocode
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Promocode) (types.Promocode, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.Promocode) types.Promocode); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.Promocode)
	}

	if rf, ok := ret.Get(1).(func(types.Promocode) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardById provides a mock function with given fields: _a0
func (_m *Promocodes) GetRewardById(_a0 types.Reward) (types.Reward, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardById")
	}

	var r0 types.Reward
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Reward) (types.Reward, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.Reward) types.Reward); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.Reward)
	}

	if rf, ok := ret.Get(1).(func(types.Reward) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRewardsRecordByUserId provides a mock function with given fields: _a0
func (_m *Promocodes) GetRewardsRecordByUserId(_a0 types.RewardsRecord) (types.RewardsRecord, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetRewardsRecordByUserId")
	}

	var r0 types.RewardsRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(types.RewardsRecord) (types.RewardsRecord, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(types.RewardsRecord) types.RewardsRecord); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(types.RewardsRecord)
	}

	if rf, ok := ret.Get(1).(func(types.RewardsRecord) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPromocodes creates a new instance of Promocodes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPromocodes(t interface {
	mock.TestingT
	Cleanup(func())
}) *Promocodes {
	mock := &Promocodes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
