// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	promocodes "promocodes"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPromocode is a mock of Promocode interface.
type MockPromocode struct {
	ctrl     *gomock.Controller
	recorder *MockPromocodeMockRecorder
	isgomock struct{}
}

// MockPromocodeMockRecorder is the mock recorder for MockPromocode.
type MockPromocodeMockRecorder struct {
	mock *MockPromocode
}

// NewMockPromocode creates a new mock instance.
func NewMockPromocode(ctrl *gomock.Controller) *MockPromocode {
	mock := &MockPromocode{ctrl: ctrl}
	mock.recorder = &MockPromocodeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPromocode) EXPECT() *MockPromocodeMockRecorder {
	return m.recorder
}

// GetPromocode mocks base method.
func (m *MockPromocode) GetPromocode(p promocodes.Promocode) (promocodes.Promocode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPromocode", p)
	ret0, _ := ret[0].(promocodes.Promocode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPromocode indicates an expected call of GetPromocode.
func (mr *MockPromocodeMockRecorder) GetPromocode(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPromocode", reflect.TypeOf((*MockPromocode)(nil).GetPromocode), p)
}

// UpdatePromocode mocks base method.
func (m *MockPromocode) UpdatePromocode(p promocodes.Promocode) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePromocode", p)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePromocode indicates an expected call of UpdatePromocode.
func (mr *MockPromocodeMockRecorder) UpdatePromocode(p any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePromocode", reflect.TypeOf((*MockPromocode)(nil).UpdatePromocode), p)
}

// MockReward is a mock of Reward interface.
type MockReward struct {
	ctrl     *gomock.Controller
	recorder *MockRewardMockRecorder
	isgomock struct{}
}

// MockRewardMockRecorder is the mock recorder for MockReward.
type MockRewardMockRecorder struct {
	mock *MockReward
}

// NewMockReward creates a new mock instance.
func NewMockReward(ctrl *gomock.Controller) *MockReward {
	mock := &MockReward{ctrl: ctrl}
	mock.recorder = &MockRewardMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReward) EXPECT() *MockRewardMockRecorder {
	return m.recorder
}

// GetRewardById mocks base method.
func (m *MockReward) GetRewardById(r promocodes.Reward) (promocodes.Reward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardById", r)
	ret0, _ := ret[0].(promocodes.Reward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardById indicates an expected call of GetRewardById.
func (mr *MockRewardMockRecorder) GetRewardById(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardById", reflect.TypeOf((*MockReward)(nil).GetRewardById), r)
}

// MockRewards is a mock of Rewards interface.
type MockRewards struct {
	ctrl     *gomock.Controller
	recorder *MockRewardsMockRecorder
	isgomock struct{}
}

// MockRewardsMockRecorder is the mock recorder for MockRewards.
type MockRewardsMockRecorder struct {
	mock *MockRewards
}

// NewMockRewards creates a new mock instance.
func NewMockRewards(ctrl *gomock.Controller) *MockRewards {
	mock := &MockRewards{ctrl: ctrl}
	mock.recorder = &MockRewardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewards) EXPECT() *MockRewardsMockRecorder {
	return m.recorder
}

// GetRewardsRecordByUserId mocks base method.
func (m *MockRewards) GetRewardsRecordByUserId(record promocodes.RewardsRecord) (promocodes.RewardsRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsRecordByUserId", record)
	ret0, _ := ret[0].(promocodes.RewardsRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRewardsRecordByUserId indicates an expected call of GetRewardsRecordByUserId.
func (mr *MockRewardsMockRecorder) GetRewardsRecordByUserId(record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsRecordByUserId", reflect.TypeOf((*MockRewards)(nil).GetRewardsRecordByUserId), record)
}

// NewRewardsRecord mocks base method.
func (m *MockRewards) NewRewardsRecord(r promocodes.RewardsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewRewardsRecord", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// NewRewardsRecord indicates an expected call of NewRewardsRecord.
func (mr *MockRewardsMockRecorder) NewRewardsRecord(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRewardsRecord", reflect.TypeOf((*MockRewards)(nil).NewRewardsRecord), r)
}
